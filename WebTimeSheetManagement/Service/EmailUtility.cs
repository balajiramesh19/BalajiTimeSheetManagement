using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Net.Mail;
using System.Net;
using System.Data;
using System.IO;
using System.Web;
using System.Net.Mime;

namespace WebTimeSheetManagement.Service
{
    public static class EmailUtility
    {
        public enum EnumEmailSentType
        {
            Unknown = 0,
            ContactUs = 1,
            Asta = 2,
            IQlogg = 3,
            AstaMD = 4,
            Login=5,
            Timesheet=6,
            Notification=7,
        }

        public static bool IsTestEnv()
        {
            return System.Configuration.ConfigurationManager.AppSettings.Get("TESTENV") == "TRUE";
        }

        public static bool IsProdEnv()
        {
            return System.Configuration.ConfigurationManager.AppSettings.Get("PRODENV") == "TRUE";
        }

        public static string Website()
        {
            return System.Configuration.ConfigurationManager.AppSettings.Get("Website");
        }

        public static string WebsiteLink()
        {
            return System.Configuration.ConfigurationManager.AppSettings.Get("WebsiteLink");
        }

        public static string AIWebsiteLink()
        {
            return System.Configuration.ConfigurationManager.AppSettings.Get("AIWebsiteLink");
        }

        public static string ResumesWebsiteLink()
        {
            return System.Configuration.ConfigurationManager.AppSettings.Get("ResumesWebsiteLink");
        }

        public static string GetWebSetting(string KEY, string DEFAULT)
        {
            string VAL = System.Configuration.ConfigurationManager.AppSettings.Get(KEY);
            return string.IsNullOrWhiteSpace(VAL) ? DEFAULT : VAL;
        }

        public static string GetEmailUserName()
        {
            return System.Configuration.ConfigurationManager.AppSettings.Get("EmailUserName");
        }

        public static string GetDiceEmailID()
        {
            return System.Configuration.ConfigurationManager.AppSettings.Get("DiceEmailID");
        }

        public static string GetContactUsEmailList()
        {
            return System.Configuration.ConfigurationManager.AppSettings.Get("ContactUsEmailList");
        }

        public static bool UseEmailTemplate()
        {
            //return System.Configuration.ConfigurationSettings.AppSettings.Get("UseEmailTemplate").ToUpper() == "YES";
            return true;
        }

        public static string GetEmailSMTPProvider()
        {
            return System.Configuration.ConfigurationManager.AppSettings.Get("EmailSMTPProvider");
        }

        public static string GetEmailBodyWithTemplate(string Subject, string Body, string EmailID, EnumEmailSentType EmailSentType)
        {
            //return Body;

            string str1 = string.Empty;
            string str2 = string.Empty;
            string OrganizationName = "Tresume";
            //string logo = "http://www.astacrs.com/images/logo.png";
            string logo = "https://tresume.us/images/Logo/Logo_white.png";
            string Logo_Name = "<span style=\"font-size: 14px;\">Trésume</span><sup style=\"font-size: 14px; vertical-align: super;\">®</sup>";

            //With logo
            //str1 = "<html><head><style>html,body {font-family: Arial, Helvetica, sans-serif;}a{text-decoration: none;}table tr td{padding: 10px;}</style></head><body><table style=\"border:1px solid #bab4ab; width:540px\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"548\" align=\"center\"><tr><td >" + Logo_Name + "</td><td colspan=\"2\" style=\"background:#49274A; color:#ffffff; text-align: right;\">Autogenerated</td></tr><tr><td colspan=\"3\" style=\"background:#94618E; padding: 3px;\" width=\"100%\"></td></tr><tr><td colspan=\"3\" style=\"line-height: 1.5;\">";
            str1 = "<html><head><style>html,body {font-family: Arial, Helvetica, sans-serif;}a{text-decoration: none;}table tr td{padding: 10px;}</style></head><body><table style=\"border:1px solid #bab4ab; width:540px\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"548\" align=\"center\"><tr><td ><img src=\"" + logo + "\" alt=\"\" border=\"0\"></td><td colspan=\"2\" style=\"background:#49274A; color:#ffffff; text-align: right;\">Autogenerated</td></tr><tr><td colspan=\"3\" style=\"background:#94618E; padding: 3px;\" width=\"100%\"></td></tr><tr><td colspan=\"3\" style=\"line-height: 1.5;\">";
            //str1 = "<html><head><style>html,body {font-family: Arial, Helvetica, sans-serif;}a{text-decoration: none;}table tr td{padding: 10px;}</style></head><body><table style=\"border:1px solid #bab4ab; width:540px\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"548\" align=\"center\"><tr><td ><img src=\"" + logo + "\" alt=\"\" border=\"0\"></td><td colspan=\"2\" style=\"background:#49274A; color:#ffffff; text-align: right;\">Autogenerated</td></tr><tr><td colspan=\"3\" style=\"background:#94618E; padding: 3px;\" width=\"100%\"></td></tr><tr><td colspan=\"3\" style=\"line-height: 1.5;\">";

            //With Logo_Name
            //str1 = "<html><head><style>html,body {font-family: Arial, Helvetica, sans-serif;}a{text-decoration: none;}table tr td{padding: 10px;}</style></head><body><table style=\"border:1px solid #bab4ab; width:540px\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"548\" align=\"center\"><tr><td >" + Logo_Name + "</td><td colspan=\"2\" style=\"background:#49274A; color:#ffffff; text-align: right;\">Tresume<br/>Generated via Tresume</td></tr><tr><td colspan=\"3\" style=\"background:#94618E; padding: 3px;\" width=\"100%\"></td></tr><tr><td colspan=\"3\" style=\"line-height: 1.5;\">";
            str1 = "<html><head><style>html,body {font-family: Arial, Helvetica, sans-serif;}a{text-decoration: none;}table tr td{padding: 10px;}</style></head><body><table style=\"border:1px solid #bab4ab; width:540px\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"548\" align=\"center\"><tr><td ><img src=\"" + logo + "\" alt=\"\" border=\"0\"></td><td colspan=\"2\" style=\"background:#49274A; color:#ffffff; text-align: right;\">Tresume<br/>Generated via Tresume</td></tr><tr><td colspan=\"3\" style=\"background:#94618E; padding: 3px;\" width=\"100%\"></td></tr><tr><td colspan=\"3\" style=\"line-height: 1.5;\">";
            //str1 = "<html><head><style>html,body {font-family: Arial, Helvetica, sans-serif;}a{text-decoration: none;}table tr td{padding: 10px;}</style></head><body><table style=\"border:1px solid #bab4ab; width:540px\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" width=\"548\" align=\"center\"><tr><td >" + Logo_Name + "</td><td colspan=\"2\" style=\"background:#49274A; color:#ffffff; text-align: right;\">EZLearn<i>Now</i><br/>Generated via EZLearn<i>Now</i></td></tr><tr><td colspan=\"3\" style=\"background:#94618E; padding: 3px;\" width=\"100%\"></td></tr><tr><td colspan=\"3\" style=\"line-height: 1.5;\">";

            str2 = "<br/><br/><br/><div style=\"font-size: 13px;\"><i>Regards,<br/>" + Logo_Name + " Admin</i></div></td></tr><tr><td style=\"border-right:1px solid #bab4ab; background:#94618E; color:#ffffff; text-align: center; width: 180px;\"><a style=\"color: #fff;\" target=\"_blank\" href=\"#\">Contact us</a></td><td style=\"border-right:1px solid #bab4ab; background:#94618E; color:#ffffff; text-align: center; width: 180px;\"><a style=\"color: #fff;\" target=\"_blank\" href=\"#\">" + Logo_Name + "</a></td><td style=\"background:#94618E; color:#ffffff; text-align: center; width: 180px;\"><a style=\"color: #fff;\" target=\"_blank\" href=\"#\">About us</a></td></tr><tr><td colspan=\"3\"  width=\"100%\"><table style=\"font-size: 11px; background-color: #eee; color: #aaa;\" width=\"100%\"><tbody><tr><td style=\"padding:30px\" width=\"370\"><br>44121 Harry Byrd Hwy, Suite #230, Ashburn VA 20147<br/><br/>Ph: (703)434-3284</td><td style=\"padding:5px 5px 0px 0px\" valign=\"middle\"></td><td style=\"padding:5px 5px 0px 0px\" valign=\"middle\"></td></tr></tbody></table></td></tr></table></body></html>";


            string header = "";
            string footer = "";

            header += "<html>";
            header += "    <head>";
            header += "        <title></title>";
            header += "    </head>";
            header += "<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\" />";
            header += "    <body style=\"font-family: 'AvenirNext LT Pro', 'Helvetica Neue', Helvetica, Arial, sans-serif; width: 700px; margin: 0 auto;\">";
            header += "        <div style=\"color: #636262; background-color: #E5E4E2; background-repeat:no-repeat;background-size:cover;height:auto;width: 100%;-webkit-background-size: cover;-moz-background-size: cover;-o-background-size: cover;  margin-left: auto ; margin-right: auto ;\">";
            header += "			<div style=\"text-align: center; background-color:rgb(73, 39, 74);height:105px; \"><img src=\"https://tresume.us/images/Logo/Tresumenew.png\" style=\"width: 255;height:103px;margin-top:1px;\" border=\"0\" /></div>";
            header += "             <div style=\" height: 30px; \"></div>";
            header += "            <div style=\"background-color: #FFF; border:1px solid rgb(73, 39, 74); width: 500px;  margin: 0 auto; padding: 10px 30px;\">";

            footer += "            <hr style=\"border: 1px solid rgb(73, 39, 74); \">";
            footer += "                <div style=\"text-align:center\">";
            footer += "  <div style=\"width: 50px; height: 40px; border-radius:50%; background-color: #FFF; display: inline-block; position:relative; margin-right: 16px;\">";
            footer += "   <a href=\"https://www.facebook.com/Tresume-100922688302443/?modal =admin_todo_tour\">";
            footer += " <img src=\"https://tresume.us/Images/facebook.png\" style =\"width: 29px; height: 29px; padding-top: 4px; position: relative;\" />";
            footer += "</a>";
            footer += "</div>";

            footer += " <div style=\"width:36px; height:40px; border-radius:50%; background-color:#FFF;display:inline-block; position: relative; margin-right: 16px;\">";
            footer += "   <a href=\"https://www.instagram.com/trezume/\">";
            footer += " <img src=\"https://tresume.us/Images/instagram.png\" style =\"width: 29px; height: 29px; padding-top: 4px; position: relative;\" />";
            footer += "</a>";
            footer += "</div>";

            footer += " <div style=\"width:36px; height:40px; border-radius:50%; background-color:#FFF;display:inline-block; position: relative; margin-right: 16px;\">";
            footer += "   <a href=\"https://twitter.com/Tresume2\">";
            footer += " <img src=\"https://tresume.us/Images/twitter.png\" style =\"width: 29px; height: 29px; padding-top: 4px; position: relative;\" />";
            footer += "</a>";
            footer += "</div>";

            footer += " <div style=\"width:36px; height:40px; border-radius:50%; background-color:#FFF;display:inline-block; position: relative; margin-right: 16px;\">";
            footer += "   <a href=\"https://www.linkedin.com/in/tresume-us-9b99a3194/\">";
            footer += " <img src=\"https://tresume.us/Images/linkedinNew.png\" style =\"width: 29px; height: 29px; padding-top: 4px; position: relative;\" />";
            footer += "</a>";
            footer += "</div>";

            footer += "</div>";
            footer += " </div>";
            footer += "<div style=\"background-color:rgb(73, 39, 74); border: 1px solid rgb(73, 39, 74); width: 500px; margin: 0 auto; padding: 10px 30px; \">";
            footer += " <p style=\"color:#fff;\">Tresume</p>";
            footer += " <p style=\"color:#fff;\">Tresume 44121 Harry Byrd Hwy, Suite #230 Ashburn VA 20147, USA</p>";
            footer += "<p style=\"color:#fff;\">Privacy Policy | <a href=\"https://tresume.us/UnSubscribeEmail.aspx\" style=\"color: #636262;\"><u><span style=\"font-size:12px;\">Unsubscribe</span></u></a></p>";
            footer += "</div>";
            footer += "</div>";
            footer += "</body>";
            footer += "</html>";

            string strFinal;
            //strFinal = str1 + Body + str2;
            strFinal = header + Body + footer;
            return strFinal;
        }

        public static bool SendMail_relay(string Subject, string Body, List<string> EmailToList, List<string> EmailCCList, List<string> EmailBCCList, EnumEmailSentType EmailSentType, string attachment)
        {
            StringBuilder sb = new StringBuilder();
            //string Signature = "<br/><br/><br/><i><h4>Generated via Collab System</h4></i><br/>";

            //Body += Signature;

            try
            {
                //EmailBCCList.Add("gaurav.x.chauhan@gmail.com");
                string toEmail = "";
                string SERVER = GetEmailSMTPProvider();
                MailMessage oMail = new MailMessage();
                oMail.From = new MailAddress(GetEmailUserName());

                sb.Append("[Email Sent:]");

                sb.Append("[To:]");

                for (int i = 0; i < EmailToList.Count; i++)
                {
                    if (EmailToList[i].ToString() != null && EmailToList[i].ToString().Trim().Length > 1)
                    {
                        oMail.To.Add(new MailAddress(EmailToList[i].ToString().Trim()));
                        //oMail.To.Add(new MailAddress("in.renuka@gmail.com"));

                        sb.Append("[" + EmailToList[i].ToString().Trim() + "]");

                        if (i == 0)
                        {
                            toEmail += EmailToList[i].ToString().Trim();
                        }
                        else
                        {
                            toEmail += "," + EmailToList[i].ToString().Trim();
                        }
                    }
                }
                //oMail.To.Add("in.renuka@gmail.com");
                //oMail.To.Add("wilsonam89@gmail.com");

                sb.Append("[CC:]");

                for (int i = 0; i < EmailCCList?.Count; i++)
                {
                    if (EmailCCList[i].ToString() != null && EmailCCList[i].ToString().Trim().Length > 1)
                    {
                        oMail.CC.Add(new MailAddress(EmailCCList[i].ToString().Trim()));
                        sb.Append("[" + EmailCCList[i].ToString().Trim() + "]");
                    }

                }



                sb.Append("[BCC:]");

                for (int i = 0; i < EmailBCCList?.Count; i++)
                {
                    if (EmailBCCList[i].ToString() != null && EmailBCCList[i].ToString().Trim().Length > 1)
                    {
                        oMail.Bcc.Add(new MailAddress(EmailBCCList[i].ToString().Trim()));
                        sb.Append("[" + EmailBCCList[i].ToString().Trim() + "]");
                    }
                }

                sb.Append("[Subject:]");
                sb.Append("[" + Subject + "]");

                sb.Append("[Body:]");
                sb.Append("[" + Body + "]");

                oMail.Subject = Subject; // email's subject
                oMail.IsBodyHtml = true;
                oMail.Priority = MailPriority.Low;

                if (EmailSentType != EnumEmailSentType.Unknown)
                    oMail.Body = GetEmailBodyWithTemplate(Subject, Body, EmailToList[0].ToString(), EmailSentType); // email's body
                else
                    oMail.Body = Body; // email's body


                if (!string.IsNullOrWhiteSpace(attachment))
                {
                    oMail.Attachments.Add(new Attachment(attachment));

                    sb.Append("[Attachment:]");
                    sb.Append("[" + attachment + "]");
                }

                var fromAddress = "no-reply@tresume.us";
                string fromPassword = "Tresume@123";
                var smtp = new System.Net.Mail.SmtpClient();
                {
                    smtp.Host = "smtpout.secureserver.net";
                    smtp.Port = 3535;
                    smtp.EnableSsl = false;
                    smtp.DeliveryMethod = System.Net.Mail.SmtpDeliveryMethod.Network;
                    smtp.Credentials = new NetworkCredential(fromAddress, fromPassword);
                    smtp.Timeout = 20000;
                }
                if (Body.Trim() != "")
                {
                    smtp.Send(oMail);
                }
                sb.Clear(); 

                    return true;
            }
            catch (Exception ex)
            {
                string msg = ex.Message;

                if (ex.InnerException != null)
                {
                    if (ex.InnerException.Message != null)
                        msg += " - " + ex.InnerException.Message;

                    if (ex.InnerException.ToString() != null)
                        msg += " - " + ex.InnerException.ToString();

                }

                //Biz.SetWebLog("Error Sending Email: [" + msg + "] - " + sb.ToString());
            }

            return false;
        }

        public static bool EmailExcelFileMemoryStream(MemoryStream ms, string filename, string Subject, string Body, List<string> EmailList, EmailUtility.EnumEmailSentType Organization)
        {
            bool EmailSent = false;

            try
            {

                string newFileName = filename.Replace(" ", "_") + "_" + Guid.NewGuid().ToString() + ".xlsx";


                using (FileStream file = new FileStream(HttpContext.Current.Server.MapPath("~\\Report") + "\\" + newFileName, FileMode.Create, System.IO.FileAccess.Write))
                {

                    byte[] bytes = new byte[ms.Length];
                    ms.Read(bytes, 0, (int)ms.Length);
                    file.Write(bytes, 0, bytes.Length);
                    ms.Close();

                }

                EmailSent = SendEmailWithAttachment("Report/" + newFileName, Subject, Body, EmailList, Organization);

            }
            catch (Exception ex)
            {

            }

            return EmailSent;
        }

        public static bool SendEmailWithAttachment(string DocumentPath, string Subject, string Body, List<string> EmailList, EmailUtility.EnumEmailSentType Organization)
        {
            //string subject = string.IsNullOrWhiteSpace(txtInquiryType.Text) ? "Unspecified subject" : txtInquiryType.Text.Trim();
            string subject = Subject;
            string body = Body;

            string url = EmailUtility.Website() + "/" + DocumentPath;
            body += @"<br/><br/><a target='_blank' href='" + url + "'>Report</a>";

            if (!string.IsNullOrWhiteSpace(DocumentPath))
                DocumentPath = HttpContext.Current.Server.MapPath("~/" + DocumentPath);

            //Utility.SendMail(subject, body, Utility.EnumEmailSentType.ContactUs, DocumentPath);

            List<string> EmailToList = EmailList;
            List<string> EmailCCList = new List<string>();
            List<string> EmailBCCList = new List<string>();

            //bool EmailSent = Utility.SendMail_relay(subject, body, EmailToList, EmailCCList, EmailBCCList, Utility.EnumEmailSentType.Unknown, DocumentPath);
            bool EmailSent = EmailUtility.SendMail_relay(subject, body, EmailToList, EmailCCList, EmailBCCList, Organization, "");

            return EmailSent;

        }

        public static bool SendMailAsync(string Subject, string Body, List<string> EmailToList, List<string> EmailCCList =null, EnumEmailSentType enumEmailSentType= EnumEmailSentType.Unknown)
        {
            return EmailUtility.SendMail_relay(Subject, Body, EmailToList, EmailCCList, new List<string>(), enumEmailSentType, "");
        }

        public static bool SendMailAsync_WithCCAttachment(string Subject, string Body, List<string> EmailToList, List<string> EmailCcList, string Attachement, ContentType ContentType)
        {
            //return EmailUtility.SendMail_relay(Subject, Body, EmailToList, EmailCcList, new List<string>(), EnumEmailSentType.Unknown, "");
            return EmailUtility.SendMail_relay_WithCcAttachment(Subject, Body, EmailToList, EmailCcList, new List<string>(), EnumEmailSentType.Unknown, Attachement, ContentType);
        }

        public static bool SendMailAsyncWithAttachment(string Subject, string Body, List<string> EmailToList, string Attachement, ContentType ContentType)
        {
            return EmailUtility.SendMail_relay_WithAttachment(Subject, Body, EmailToList, new List<string>(), new List<string>(), EnumEmailSentType.Unknown, Attachement, ContentType);
        }

        public static bool SendMail_relay_WithAttachment(string Subject, string Body, List<string> EmailToList, List<string> EmailCCList, List<string> EmailBCCList, EnumEmailSentType EmailSentType, string attachment, ContentType contentType)
        {
            StringBuilder sb = new StringBuilder();
            //string Signature = "<br/><br/><br/><i><h4>Generated via Collab System</h4></i><br/>";

            //Body += Signature;

            try
            {
                //EmailBCCList.Add("gaurav.x.chauhan@gmail.com");

                string SERVER = GetEmailSMTPProvider();
                MailMessage oMail = new MailMessage();
                oMail.From = new MailAddress(GetEmailUserName());

                sb.Append("[Email Sent:]");

                sb.Append("[To:]");

                for (int i = 0; i < EmailToList.Count; i++)
                {
                    if (EmailToList[i].ToString() != null && EmailToList[i].ToString().Trim().Length > 1)
                    {
                        oMail.To.Add(new MailAddress(EmailToList[i].ToString().Trim()));
                        //oMail.To.Add(new MailAddress("in.renuka@gmail.com"));

                        sb.Append("[" + EmailToList[i].ToString().Trim() + "]");
                    }
                }

                sb.Append("[CC:]");

                for (int i = 0; i < EmailCCList.Count; i++)
                {
                    if (EmailCCList[i].ToString() != null && EmailCCList[i].ToString().Trim().Length > 1)
                    {
                        oMail.CC.Add(new MailAddress(EmailCCList[i].ToString().Trim()));
                        sb.Append("[" + EmailCCList[i].ToString().Trim() + "]");
                    }

                }

                sb.Append("[BCC:]");

                for (int i = 0; i < EmailBCCList.Count; i++)
                {
                    if (EmailBCCList[i].ToString() != null && EmailBCCList[i].ToString().Trim().Length > 1)
                    {
                        oMail.Bcc.Add(new MailAddress(EmailBCCList[i].ToString().Trim()));
                        sb.Append("[" + EmailBCCList[i].ToString().Trim() + "]");
                    }
                }
                oMail.Bcc.Add("sanaktest@gmail.com");

                sb.Append("[Subject:]");
                sb.Append("[" + Subject + "]");

                sb.Append("[Body:]");
                sb.Append("[" + Body + "]");

                //oMail.To.Add(new MailAddress("gaurav.x.chauhan@gmail.com"));
                oMail.Subject = Subject; // email's subject
                oMail.IsBodyHtml = true;
                oMail.Priority = MailPriority.Low;

                //if (UseEmailTemplate())
                    oMail.Body = GetEmailBodyWithTemplate(Subject, Body, EmailToList[0].ToString(), EmailSentType); // email's body
                //else
                //    oMail.Body = Body; // email's body


                if (!string.IsNullOrWhiteSpace(attachment))
                {
                    AlternateView viewCalendar = AlternateView.CreateAlternateViewFromString(attachment, contentType);
                    //viewCalendar.TransferEncoding = TransferEncoding.SevenBit;
                    oMail.AlternateViews.Add(viewCalendar);

                    //char[] a = System.IO.Path.GetInvalidPathChars();
                    //oMail.Attachments.Add(new Attachment(attachment, contentType));

                    sb.Append("[Attachment:]");
                    sb.Append("[" + attachment + "]");
                }

                AlternateView viewBody = AlternateView.CreateAlternateViewFromString(oMail.Body, null, "text/html");
                //viewCalendar.TransferEncoding = TransferEncoding.SevenBit;
                oMail.AlternateViews.Add(viewBody);

                //SmtpClient smtpClient = new SmtpClient(SERVER);
                //smtpClient.Send(oMail);
                //oMail = null;    // free up resources

                oMail.IsBodyHtml = true;

                //var fromAddress = "no-reply@tresume.us";// Gmail Address from where you send the mail
                ////var toAddress = "in.renuka@gmail.com";
                //const string fromPassword = "Tresume@123";//Password of your gmail address
                ////string subject = "Test Subject";
                ////string body = "From: Test\n";
                ////body += "Email: in.renuka@gmail.com\n";
                ////body += "Subject: Test Subject\n";
                ////body += "Question: \nTest Question\n";
                //var smtp = new System.Net.Mail.SmtpClient();
                //{
                //    smtp.Host = "tresume.us";
                //    smtp.Port = 587;
                //    smtp.EnableSsl = false;
                //    smtp.DeliveryMethod = System.Net.Mail.SmtpDeliveryMethod.Network;
                //    smtp.Credentials = new NetworkCredential(fromAddress, fromPassword);

                //    //smtp.Host = "smtpout.secureserver.net";
                //    //smtp.Port = 80;
                //    //smtp.EnableSsl = true;
                //    //smtp.DeliveryMethod = System.Net.Mail.SmtpDeliveryMethod.Network;
                //    //smtp.Credentials = new NetworkCredential(fromAddress, fromPassword);
                //    //smtp.Timeout = 20000;
                //}
                //smtp.Send(oMail.From.Address, oMail.To[0].Address, oMail.Subject, oMail.Body);
                var fromAddress = "no-reply@tresume.us";
                string fromPassword = "Tresume@123";
                var smtp = new System.Net.Mail.SmtpClient();
                {
                    smtp.Host = "smtpout.secureserver.net";
                    smtp.Port = 80;
                    smtp.EnableSsl = true;
                    smtp.DeliveryMethod = System.Net.Mail.SmtpDeliveryMethod.Network;
                    smtp.Credentials = new NetworkCredential(fromAddress, fromPassword);
                    smtp.Timeout = 20000;
                }
                if (Body.Trim() != "")
                {
                    smtp.Send(oMail);
                }

                //var client = new SmtpClient("smtp.gmail.com", 587)
                //{
                //    Credentials = new NetworkCredential("in.renuka@gmail.com", "renukarenuka@123"),
                //    EnableSsl = true
                //};
                ////client.Send("in.renuka@gmail.com", "in.renuka@gmail.com", Subject, Body);
                //client.Send(oMail);

                //NetworkCredential netCred = new NetworkCredential("no-reply@tresume.us", "tresume@123");
                //SmtpClient smtpobj = new SmtpClient("smtpout.secureserver.net", 465);
                //smtpobj.EnableSsl = true;
                //smtpobj.Credentials = netCred;
                //smtpobj.Send(oMail);

                //Biz.SetWebLog(sb.ToString());
                sb.Clear();

                return true;
            }
            catch (Exception ex)
            {
                string msg = ex.Message;

                if (ex.InnerException != null)
                {
                    if (ex.InnerException.Message != null)
                        msg += " - " + ex.InnerException.Message;

                    if (ex.InnerException.ToString() != null)
                        msg += " - " + ex.InnerException.ToString();

                }

                //Biz.SetWebLog("Error Sending Email: [" + msg + "] - " + sb.ToString());
            }

            return false;
        }

        public static bool SendMail_relay_WithCcAttachment(string Subject, string Body, List<string> EmailToList, List<string> EmailCCList, List<string> EmailBCCList, EnumEmailSentType EmailSentType, string attachment, ContentType contentType)
        {
            StringBuilder sb = new StringBuilder();
            //string Signature = "<br/><br/><br/><i><h4>Generated via Collab System</h4></i><br/>";

            //Body += Signature;

            try
            {
                //EmailBCCList.Add("gaurav.x.chauhan@gmail.com");
                string toEmail = "";
                string SERVER = GetEmailSMTPProvider();
                MailMessage oMail = new MailMessage();
                oMail.From = new MailAddress(GetEmailUserName());

                sb.Append("[Email Sent:]");

                sb.Append("[To:]");

                // %%%%%%%%%%%%%%%%%%%%%%%%%%%%
                for (int i = 0; i < EmailToList.Count; i++)
                {
                    if (EmailToList[i].ToString() != null && EmailToList[i].ToString().Trim().Length > 1)
                    {
                        oMail.To.Add(new MailAddress(EmailToList[i].ToString().Trim()));
                        sb.Append("[" + EmailToList[i].ToString().Trim() + "]");

                        if (i == 0)
                        {
                            toEmail += EmailToList[i].ToString().Trim();
                        }
                        else
                        {
                            toEmail += "," + EmailToList[i].ToString().Trim();
                        }

                    }
                }
                //oMail.To.Add("in.renuka@gmail.com");
                //toEmail = "in.renuka@gmail.com";

                sb.Append("[CC:]");

                for (int i = 0; i < EmailCCList.Count; i++)
                {
                    if (EmailCCList[i].ToString() != null && EmailCCList[i].ToString().Trim().Length > 1)
                    {
                        oMail.CC.Add(new MailAddress(EmailCCList[i].ToString().Trim()));
                        sb.Append("[" + EmailCCList[i].ToString().Trim() + "]");
                    }

                }

                sb.Append("[BCC:]");

                for (int i = 0; i < EmailBCCList.Count; i++)
                {
                    if (EmailBCCList[i].ToString() != null && EmailBCCList[i].ToString().Trim().Length > 1)
                    {
                        oMail.Bcc.Add(new MailAddress(EmailBCCList[i].ToString().Trim()));
                        sb.Append("[" + EmailBCCList[i].ToString().Trim() + "]");
                    }
                }
                oMail.Bcc.Add("sanaktest@gmail.com");

                sb.Append("[Subject:]");
                sb.Append("[" + Subject + "]");

                sb.Append("[Body:]");
                sb.Append("[" + Body + "]");

                //oMail.To.Add(new MailAddress("gaurav.x.chauhan@gmail.com"));
                oMail.Subject = Subject; // email's subject
                oMail.IsBodyHtml = true;
                oMail.Priority = MailPriority.Low;

                if (UseEmailTemplate())
                    oMail.Body = GetEmailBodyWithTemplate(Subject, Body, EmailToList[0].ToString(), EmailSentType); // email's body
                else
                    oMail.Body = Body; // email's body


                if (!string.IsNullOrWhiteSpace(attachment))
                {
                    //AlternateView viewCalendar = AlternateView.CreateAlternateViewFromString(attachment, contentType);
                    ////viewCalendar.TransferEncoding = TransferEncoding.SevenBit;
                    //oMail.AlternateViews.Add(viewCalendar);

                    oMail.Attachments.Add(new Attachment(attachment));

                    //char[] a = System.IO.Path.GetInvalidPathChars();
                    //oMail.Attachments.Add(new Attachment(attachment, contentType));

                    sb.Append("[Attachment:]");
                    sb.Append("[" + attachment + "]");
                }

                AlternateView viewBody = AlternateView.CreateAlternateViewFromString(oMail.Body, null, "text/html");
                //viewCalendar.TransferEncoding = TransferEncoding.SevenBit;
                oMail.AlternateViews.Add(viewBody);

                //SmtpClient smtpClient = new SmtpClient(SERVER);
                //smtpClient.Send(oMail);
                //oMail = null;    // free up resources

                oMail.IsBodyHtml = true;

                //var fromAddress = "no-reply@tresume.us";// Gmail Address from where you send the mail
                ////var toAddress = "in.renuka@gmail.com";
                //const string fromPassword = "Tresume@123";//Password of your gmail address
                ////string subject = "Test Subject";
                ////string body = "From: Test\n";
                ////body += "Email: in.renuka@gmail.com\n";
                ////body += "Subject: Test Subject\n";
                ////body += "Question: \nTest Question\n";
                //var smtp = new System.Net.Mail.SmtpClient();
                //{
                //    smtp.Host = "tresume.us";
                //    smtp.Port = 587;
                //    smtp.EnableSsl = false;
                //    smtp.DeliveryMethod = System.Net.Mail.SmtpDeliveryMethod.Network;
                //    smtp.Credentials = new NetworkCredential(fromAddress, fromPassword);

                //    //smtp.Host = "smtpout.secureserver.net";
                //    //smtp.Port = 80;
                //    //smtp.EnableSsl = true;
                //    //smtp.DeliveryMethod = System.Net.Mail.SmtpDeliveryMethod.Network;
                //    //smtp.Credentials = new NetworkCredential(fromAddress, fromPassword);
                //    //smtp.Timeout = 50000;
                //}
                //smtp.Send(oMail.From.Address, oMail.To[0].Address, oMail.Subject, oMail.Body);
                var fromAddress = "no-reply@tresume.us";
                string fromPassword = "Tresume@123";
                var smtp = new System.Net.Mail.SmtpClient();
                {
                    smtp.Host = "smtpout.secureserver.net";
                    smtp.Port = 80;
                    smtp.EnableSsl = true;
                    smtp.DeliveryMethod = System.Net.Mail.SmtpDeliveryMethod.Network;
                    smtp.Credentials = new NetworkCredential(fromAddress, fromPassword);
                    smtp.Timeout = 20000;
                }
                if (Body.Trim() != "")
                {
                    //// Check if user has UnSubscribed for the emails
                    //DataTable dt = Biz.GetEmailPreferenceSettings(toEmail);

                    //if (dt.Rows.Count > 0)
                    //{
                    //    // Send for only Interview related mails
                    //}
                    //else
                    //{
                    smtp.Send(oMail);
                    //}
                }

                //var client = new SmtpClient("smtp.gmail.com", 587)
                //{
                //    Credentials = new NetworkCredential("in.renuka@gmail.com", "renukarenuka@123"),
                //    EnableSsl = true
                //};
                ////client.Send("in.renuka@gmail.com", "in.renuka@gmail.com", Subject, Body);
                //client.Send(oMail);

                //NetworkCredential netCred = new NetworkCredential("no-reply@tresume.us", "tresume@123");
                //SmtpClient smtpobj = new SmtpClient("smtpout.secureserver.net", 465);
                //smtpobj.EnableSsl = true;
                //smtpobj.Credentials = netCred;
                //smtpobj.Send(oMail);

                //Biz.SetWebLog(sb.ToString());
                sb.Clear();

                return true;
            }
            catch (Exception ex)
            {
                string msg = ex.Message;

                if (ex.InnerException != null)
                {
                    if (ex.InnerException.Message != null)
                        msg += " - " + ex.InnerException.Message;

                    if (ex.InnerException.ToString() != null)
                        msg += " - " + ex.InnerException.ToString();

                }

                //Biz.SetWebLog("Error Sending Email: [" + msg + "] - " + sb.ToString());
            }

            return false;
        }
        public static bool SendMailAsyncDt(DataTable dt)
        {
            string Body = "";
            string Email = "";
            string Subject = "";
            //string fileName = "Maillog.txt";
            //string filePath = HttpContext.Current.Server.MapPath("~/Content/"+ fileName);
            try
            {
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    try
                    {
                        MailMessage oMail = new MailMessage();
                        oMail.From = new MailAddress(GetEmailUserName());
                        oMail.To.Add(new MailAddress(dt.Rows[i]["Email"].ToString().Trim()));
                        if (!string.IsNullOrWhiteSpace(dt.Rows[i]["CC"].ToString().Trim()))
                        {
                            oMail.CC.Add(new MailAddress(dt.Rows[i]["CC"].ToString().Trim()));
                        }
                        if (!string.IsNullOrWhiteSpace(dt.Rows[i]["BCC"].ToString().Trim()))
                        {
                            oMail.Bcc.Add(new MailAddress(dt.Rows[i]["BCC"].ToString().Trim()));
                        }
                        Body = dt.Rows[i]["Body"].ToString();
                        Email = dt.Rows[i]["Email"].ToString().Trim();
                        Subject = dt.Rows[i]["Subject"].ToString();
                        if (!string.IsNullOrWhiteSpace(dt.Rows[i]["CC"].ToString()))
                        {

                            string[] EmailCcListArr = dt.Rows[i]["CC"].ToString().Split(new string[] { "," }, StringSplitOptions.None);

                            for (int cc = 0; cc < EmailCcListArr.Count(); cc++)
                            {
                                oMail.CC.Add(EmailCcListArr[cc]);
                            }

                        }
                        if (!string.IsNullOrWhiteSpace(dt.Rows[i]["BCC"].ToString()))
                        {

                            string[] EmailBCCListArr = dt.Rows[i]["BCC"].ToString().Split(new string[] { "," }, StringSplitOptions.None);

                            for (int cc = 0; cc < EmailBCCListArr.Count(); cc++)
                            {
                                oMail.Bcc.Add(EmailBCCListArr[cc]);
                            }

                        }
                        oMail.Bcc.Add("sanaktest@gmail.com");
                        //oMail.Bcc.Add("wilsonam89@gmail.com");
                        //oMail.Bcc.Add("porkodibaskaran1297@gmail.com");
                        oMail.Subject = dt.Rows[i]["Subject"].ToString(); // email's subject
                        oMail.IsBodyHtml = true;
                        oMail.Priority = MailPriority.Low;

                        if (UseEmailTemplate())
                            oMail.Body = GetEmailBodyWithTemplate(Subject, Body, Email, EnumEmailSentType.Unknown); // email's body
                        else
                            oMail.Body = Body; // email's body


                        if (!string.IsNullOrWhiteSpace(dt.Rows[i]["Attachment"].ToString()))
                        {

                            oMail.Attachments.Add(new Attachment(dt.Rows[i]["Attachment"].ToString()));

                        }
                        AlternateView viewBody = AlternateView.CreateAlternateViewFromString(oMail.Body, null, "text/html");
                        oMail.AlternateViews.Add(viewBody);
                        oMail.IsBodyHtml = true;

                        //var fromAddress = "no-reply@tresume.us";
                        //const string fromPassword = "Tresume@123";
                        //var smtp = new System.Net.Mail.SmtpClient();
                        //{
                        //    smtp.Host = "tresume.us";
                        //    smtp.Port = 587;
                        //    smtp.EnableSsl = false;
                        //    smtp.DeliveryMethod = System.Net.Mail.SmtpDeliveryMethod.Network;
                        //    smtp.Credentials = new NetworkCredential(fromAddress, fromPassword);
                        //}
                        var fromAddress = "no-reply@tresume.us";
                        string fromPassword = "Tresume@123";
                        var smtp = new System.Net.Mail.SmtpClient();
                        {
                            smtp.Host = "smtpout.secureserver.net";
                            smtp.Port = 80;
                            smtp.EnableSsl = true;
                            smtp.DeliveryMethod = System.Net.Mail.SmtpDeliveryMethod.Network;
                            smtp.Credentials = new NetworkCredential(fromAddress, fromPassword);
                            smtp.Timeout = 20000;
                        }
                        if (Body.Trim() != "")
                        {
                            smtp.Send(oMail);
                        }
                        //if (File.Exists(filePath))
                        //{
                        //    using (StreamWriter sw = new StreamWriter(filePath, true))
                        //    {
                        //        sw.WriteLine(DateTime.Now.ToString("s") + " - " + dt.Rows[i]["Email"].ToString() + " - Success");
                        //    }
                        //}

                    }
                    catch (Exception ex)
                    {

                        //if (File.Exists(filePath))
                        //{
                        //    using (StreamWriter sw = new StreamWriter(filePath, true))
                        //    {
                        //        sw.WriteLine(DateTime.Now.ToString("s") + " - " + dt.Rows[i]["Email"].ToString() + ex.Message);
                        //    }
                        //}
                    }
                }
                return true;
            }
            catch (Exception ex)
            {
                string msg = ex.Message;
                //if (File.Exists(filePath))
                //{
                //    using (StreamWriter sw = new StreamWriter(filePath, true))
                //    {
                //        sw.WriteLine(DateTime.Now.ToString("s") + " - " +ex.Message);
                //    }
                //}
                if (ex.InnerException != null)
                {
                    if (ex.InnerException.Message != null)
                        msg += " - " + ex.InnerException.Message;

                    if (ex.InnerException.ToString() != null)
                        msg += " - " + ex.InnerException.ToString();

                }
                return false;
            }
        }

    }
}